{"files":[{"id":"528b544d-7471-4d29-944e-81d0f186ca99","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Tokyo\",\n  \"dependencies\": {\n    \"libraries\": [{\n      \"userSymbol\": \"LineBotSdk\",\n      \"libraryId\": \"1KsjhQa6oymhUiACWsAlFTG_XoN8Pnz4px2ekABPjO4tSMX6xRSQMBicy\",\n      \"version\": \"36\"\n    }]\n  },\n  \"webapp\": {\n    \"access\": \"ANYONE_ANONYMOUS\",\n    \"executeAs\": \"USER_DEPLOYING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"53d201f4-c255-4a3a-b27a-ab8216c2c6e2","name":"chatgpt_20_2","type":"server_js","source":"function doPost(e) {\n\n  // Lineからのリクエストを取得\n  var request_hiroki \u003d JSON.parse(e.postData.contents);\n\n  // LineからuserIdを取得\n  var userId \u003d JSON.parse(e.postData.contents).events[0].source.userId;\n  debug(\u0027userId: \u0027+userId)\n\n  // LineからuserNameを取得\n  var profileEndpoint \u003d \u0027https://api.line.me/v2/bot/profile/\u0027 + userId;\n  var headers \u003d {\n    \u0027Authorization\u0027: \u0027Bearer \u0027 + \u0027BglJOB+9TL16n8YnJuJH/c3sij+jqHB58KWkTqIZg/6nG0NXoJpi9o9DWL4EJySxRjftOJc6BDv2qZ+LncTe6HXlnmpvmIuuJJIAoquddB+8SxwnWFx0ZvKGKKHS6d5NLlkyT1Tsduwh+1NHLdWgdQdB04t89/1O/w1cDnyilFU\u003d\u0027,\n  };\n  var options \u003d {\n    \u0027headers\u0027: headers,\n    \u0027method\u0027 : \u0027get\u0027\n  };\n  var response \u003d UrlFetchApp.fetch(profileEndpoint, options);\n  var userName \u003d JSON.parse(response.getContentText()).displayName;\n  debug(\u0027userName: \u0027+userName)\n\n  //appId\n  var appId\u003d15;\n\n  //初めての会話かどうか。1は今回が初めての会話であることを示す。\n  var firstFlag\u003d0;\n\n  //conversationBefore、conversationBeforeRecordNumberを取得。\n  var conversationBefore\u003d\u0027aaa\u0027;\n  var conversationBeforeRecordNumber\u003d1000000;\n  var data\u003dgetAllDatabase_memo(appId, userId, conversationBeforeDummy\u003d1);\n  if(data.records.length\u003d\u003d0){\n    firstFlag\u003d1;\n  }\n  else{\n    firstFlag\u003d0;\n    conversationBefore\u003d((data.records[0])[\"comment\"]).value;\n    debug(\u0027conversationBefore: \u0027+conversationBefore);\n    conversationBeforeRecordNumber\u003d((data.records[0])[\"レコード番号\"]).value;\n    debug(\u0027conversationBeforeRecordNumber: \u0027+conversationBeforeRecordNumber);\n  }\n  debug(\u0027firstFlag\u0027 +firstFlag);\n\n  // メッセージイベントであるか確認\n  if (request_hiroki.events[0].type \u003d\u003d \"message\") {\n    // ユーザからのメッセージを取得\n    var message_hiroki \u003d request_hiroki.events[0].message.text;\n    \n    // 応答メッセージを作成\n    var replyMessage \u003d \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    if (message_hiroki \u003d\u003d \"コマンド\") {\n      replyMessage \u003d \"・メモ一覧\\n・メモ追加\\n・メモ削除\";\n    } else {\n      replyMessage \u003d \"何を言っているのかわからない!\\nコマンドは下記です。\\n\\n・メモ一覧\\n・メモ追加\\n・メモ削除\";\n    }\n\n    // メモ一覧を表示\n    if (message_hiroki \u003d\u003d \"メモ一覧\") {\n      replyMessage\u003dmemoListShow(appId, userId, conversationBeforeDummy\u003d0);\n    }\n\n    // メモ追加\n    if (message_hiroki \u003d\u003d \"メモ追加\") {\n      replyMessage\u003d\"メモを書いてください\";\n    }\n    if (conversationBefore\u003d\u003d\"メモ追加\"){\n      postDatabaseInformation(appId, userId, userName, message_hiroki, conversationBeforeDummy\u003d0);\n      replyMessage \u003d \"メモを追加したぜ!\";\n    }\n\n    // メモ削除\n    if (message_hiroki \u003d\u003d \"メモ削除\") {\n      replyMessage\u003dmemoListShow(appId, userId, conversationBeforeDummy\u003d0);\n      replyMessage\u003dreplyMessage + \"\\n\\n*****何番のメモを削除しますか？（半角空白を入れれば同時に複数削除できる） or 間違えた*****\";\n    }\n    if (conversationBefore\u003d\u003d\"メモ削除\"){\n      var pattern \u003d /^[0-9][0-9\\s]*[0-9]$/;\n      var pattern2 \u003d /^[0-9]$/;\n      if(message_hiroki\u003d\u003d\"間違えた\"){\n        replyMessage\u003d\"メモ削除をキャンセルします\";\n      }\n      else if (pattern.test(message_hiroki)\u003d\u003dfalse \u0026\u0026 pattern2.test(message_hiroki)\u003d\u003dfalse) {\n        replyMessage\u003d\"数字を入力しろや\";\n        replyToLine(request_hiroki.events[0].replyToken, replyMessage);\n        return;\n      }\n      else{\n        data\u003dgetAllDatabase_memo(appId, userId, conversationBeforeDummy\u003d0)\n        var recordNumbers \u003d data.records.map(function(record) {\n          return parseInt(record.レコード番号.value);\n        });\n        delete_list \u003d message_hiroki.split(\" \").map(Number);\n        if(delete_list.every(item \u003d\u003e recordNumbers.includes(item))\u003d\u003dtrue){\n          deleteRecordsFromKintone(appId, delete_list);\n          replyMessage \u003d \"メモを削除したぜ!\";\n        }\n        else{\n          replyMessage \u003d \"存在しないレコード番号が含まれています。\";\n          replyToLine(request_hiroki.events[0].replyToken, replyMessage);\n          return;\n        }\n      }\n    }\n\n\n    // Lineに応答を返す\n    replyToLine(request_hiroki.events[0].replyToken, replyMessage);\n\n    // conversationBeforeDummyが1になっているレコードのcommentをput。// 初回の場合は、conversationBeforeDummyを0にしてpost\n    if(firstFlag\u003d\u003d1){\n      postDatabaseInformation(appId, userId, userName, message_hiroki, conversationBeforeDummy\u003d1);\n    }\n    else{\n      updateRecordOneInKintone(appId, conversationBeforeRecordNumber, message_hiroki);\n    }\n  }\n}\n\n\n\n//返信\nfunction replyToLine(replyToken_hiroki, message_hiroki) {\n  var lineUrl \u003d \"https://api.line.me/v2/bot/message/reply\";\n  var lineAccessToken \u003d \"BglJOB+9TL16n8YnJuJH/c3sij+jqHB58KWkTqIZg/6nG0NXoJpi9o9DWL4EJySxRjftOJc6BDv2qZ+LncTe6HXlnmpvmIuuJJIAoquddB+8SxwnWFx0ZvKGKKHS6d5NLlkyT1Tsduwh+1NHLdWgdQdB04t89/1O/w1cDnyilFU\u003d\"; // 自分のLine Botのアクセストークンに置き換え\n  var headers_hiroki \u003d {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" + lineAccessToken\n  };\n  var payload_hiroki \u003d {\n    replyToken: replyToken_hiroki,\n    messages: [\n      {\n        type: \"text\",\n        text: message_hiroki\n      }\n    ]\n  };\n  var options \u003d {\n    method: \"post\",\n    headers: headers_hiroki,\n    payload: JSON.stringify(payload_hiroki)\n  };\n  UrlFetchApp.fetch(lineUrl, options);\n}\n\n\n\n//メモ一覧表示\nfunction memoListShow(appId, userId, conversationBeforeDummy\u003d0){\n  var data\u003dgetAllDatabase_memo(appId, userId, conversationBeforeDummy \u003d conversationBeforeDummy);\n  var replyMessage\u003d\"メモ一覧\";\n  for (var i \u003d 0; i \u003c data.records.length; i++) {\n    var record \u003d data.records[i];\n    replyMessage \u003d replyMessage + \"\\n\"+ record[\"レコード番号\"].value +\" / \"+ record[\"datetime\"].value +\" / \"+ record[\"comment\"].value ;\n  }\n  return replyMessage\n}\n\n\n\n//kintone（コメント用データベース）にPOST\nfunction postDatabaseInformation(appId, userId, userName, message_for_comment, conversationBeforeDummy\u003d0) {\n  var url \u003d \"https://9fc4t5g74iug.cybozu.com/k/v1/records.json\";\n  var recordData \u003d {\n    \"app\": appId,\n    \"records\": [\n      {\n        \"datetime\": {\n          \"value\": new Date()\n        },\n        \"userId\": {\n          \"value\": userId\n        },\n        \"userName\": {\n          \"value\": userName\n        },\n        \"comment\": {\n          \"value\": message_for_comment\n        },\n        \"conversationBeforeDummy\": {\n          \"value\": conversationBeforeDummy\n        }\n      }\n    ]\n  };\n  var options \u003d {\n    headers : {\n      \"X-Cybozu-API-Token\": \"4T7kNFSFfGFNkwqFKlcncniFNCun72qljk27w8oy\",\n      \"Content-Type\": \"application/json\"\n    },\n    method : \"post\",\n    payload : JSON.stringify(recordData)\n  };\n  try {var response \u003d UrlFetchApp.fetch(url, options);} catch (e) {debug(e); }\n}\n\n\n//kintone（コメント用データベース）からGET \nfunction getAllDatabase_memo(appId, userId, conversationBeforeDummy\u003d0) {\n  var query \u003d \u0027userId in (\"\u0027 + userId + \u0027\") and conversationBeforeDummy \u003d \u0027 + conversationBeforeDummy;\n  var url \u003d \u0027https://9fc4t5g74iug.cybozu.com/k/v1/records.json?app\u003d\u0027 + appId + \u0027\u0026query\u003d\u0027 + encodeURIComponent(query);\n  var options \u003d {\n    headers : {\n      \"X-Cybozu-API-Token\": \"4T7kNFSFfGFNkwqFKlcncniFNCun72qljk27w8oy\"\n    },\n    method : \"get\"\n  };\n  try{var response \u003d UrlFetchApp.fetch(url, options);}catch(e){debug(e)};\n  var data \u003d JSON.parse(response.getContentText());       //{records\u003d[Ljava.lang.Object;@553a20c0, totalCount\u003dnull}debugするとこうなる。これはおかしくない。最初、ここでエラーが起きていると思ってしまった。\n  return data\n}\n\n\n\n//kintone（コメント用データベース）からレコード番号recordId番の\"comment\"フィールドの値をGET。\nfunction getRecordOneFromKintone(appId, recordId) {\n  var url \u003d \u0027https://9fc4t5g74iug.cybozu.com/k/v1/record.json?app\u003d\u0027 + appId + \u0027\u0026id\u003d\u0027 + recordId;\n  var options \u003d {\n    \u0027method\u0027 : \u0027get\u0027,\n    \u0027headers\u0027: {\n      \u0027X-Cybozu-API-Token\u0027: \u00274T7kNFSFfGFNkwqFKlcncniFNCun72qljk27w8oy\u0027\n    },\n  }\n  try{var response \u003d UrlFetchApp.fetch(url, options);}catch(e){debug(e)};\n  var data \u003d JSON.parse(response.getContentText());\n  return ((data.record)[\"comment\"]).value;\n}\n\n\n\n//kintone（コメント用データベース）レコードについて、レコード番号を指定してcommentフィールドをput。\nfunction updateRecordOneInKintone(appId, recordId, message_hiroki) {\n  var url \u003d \u0027https://9fc4t5g74iug.cybozu.com/k/v1/record.json\u0027;\n  var options \u003d {\n    \u0027method\u0027 : \u0027put\u0027,\n    \u0027headers\u0027: {\n      \u0027X-Cybozu-API-Token\u0027: \u00274T7kNFSFfGFNkwqFKlcncniFNCun72qljk27w8oy\u0027,\n      \u0027Content-Type\u0027: \u0027application/json\u0027\n    },\n    \u0027payload\u0027 : JSON.stringify({\n      \u0027app\u0027: appId,\n      \u0027id\u0027: recordId,\n      \u0027record\u0027: {\n        \u0027comment\u0027: {\n          \u0027value\u0027: message_hiroki\n        }\n      }\n    })\n  };\n  try{var response \u003d UrlFetchApp.fetch(url, options);}catch(e){debug(e)};\n}\n\n\n\n//kintone（コメント用データベース）から特定のレコードを複数delete\nfunction deleteRecordsFromKintone(appId, recordIds) {\n  var url \u003d \u0027https://9fc4t5g74iug.cybozu.com/k/v1/records.json\u0027;\n  var options \u003d {\n    \u0027method\u0027 : \u0027delete\u0027,\n    \u0027headers\u0027: {\n      \u0027X-Cybozu-API-Token\u0027: \u00274T7kNFSFfGFNkwqFKlcncniFNCun72qljk27w8oy\u0027,\n      \u0027Content-Type\u0027: \u0027application/json\u0027\n    },\n    \u0027payload\u0027 : JSON.stringify({\n      \u0027app\u0027: appId,\n      \u0027ids\u0027: recordIds\n    })\n  };\n  try{var response \u003d UrlFetchApp.fetch(url, options);}catch(e){debug(e)};\n}\n\n\n\n//debug\nfunction debug(value\u003d\"debug_test_hiroki\") {\n  const sheet \u003d SpreadsheetApp.openById(\"1NDsI8ibuRjR8AsXMMu_XybaduOO052uD9v5v2AcHWes\");\n  const ss \u003d sheet.getSheetByName(\u0027sheet1\u0027);\n  const date \u003d new Date();\n  const targetRow \u003d ss.getLastRow() + 1;\n  ss.getRange(\u0027A\u0027 + targetRow).setValue(date);\n  ss.getRange(\u0027B\u0027 + targetRow).setValue(value);\n}\n\n\n\n\n  \n\n\n\n"}]}